var documenterSearchIndex = {"docs":
[{"location":"running_from_terminal.html","page":"Runs from the terminal","title":"Runs from the terminal","text":"CurrentModule = ABCredit ","category":"page"},{"location":"running_from_terminal.html#Running-the-model-from-the-terminal","page":"Runs from the terminal","title":"Running the model from the terminal","text":"","category":"section"},{"location":"running_from_terminal.html","page":"Runs from the terminal","title":"Runs from the terminal","text":"You can run the model from the terminal without activating the Julia environment via","category":"page"},{"location":"running_from_terminal.html","page":"Runs from the terminal","title":"Runs from the terminal","text":"julia --project=. main.jl","category":"page"},{"location":"running_from_terminal.html","page":"Runs from the terminal","title":"Runs from the terminal","text":"The main.jl runs the model with a set of standard parameter, if you want to specify a different set of parameters directly from the command line you can run","category":"page"},{"location":"running_from_terminal.html","page":"Runs from the terminal","title":"Runs from the terminal","text":"julia --project=. main_st_in_out.jl par1 par2 ... par33","category":"page"},{"location":"running_from_terminal.html","page":"Runs from the terminal","title":"Runs from the terminal","text":"the results of the run will be saved in a CSV. Check the main_st_in_out.jl file for details.","category":"page"},{"location":"running_from_terminal.html","page":"Runs from the terminal","title":"Runs from the terminal","text":"If you need to call the model many times with a different set of parameters e.g., if you want to calibrate it using Black-it, you might want to generate a Julia \"sysimage\" of the project to avoid the overhead caused by loading Julia libraries and compiling the code every time you run the code.","category":"page"},{"location":"running_from_terminal.html#Reduce-overhead-by-generating-of-a-sysimage-file","page":"Runs from the terminal","title":"Reduce overhead by generating of a sysimage file","text":"","category":"section"},{"location":"running_from_terminal.html","page":"Runs from the terminal","title":"Runs from the terminal","text":"First activate the Julia environment","category":"page"},{"location":"running_from_terminal.html","page":"Runs from the terminal","title":"Runs from the terminal","text":"julia --project=.","category":"page"},{"location":"running_from_terminal.html","page":"Runs from the terminal","title":"Runs from the terminal","text":"then run the following three lines","category":"page"},{"location":"running_from_terminal.html","page":"Runs from the terminal","title":"Runs from the terminal","text":"using PackageCompiler\npackages = [:StatsBase]\ncreate_sysimage(packages, sysimage_path=\"ABCreditjl.so\", precompile_execution_file=\"main.jl\")","category":"page"},{"location":"running_from_terminal.html","page":"Runs from the terminal","title":"Runs from the terminal","text":"The execution of the last line should a few minutes and will generate the sysfile named \"ABCreditjl.so\", with such a file you can run the model with a lower overhead as","category":"page"},{"location":"running_from_terminal.html","page":"Runs from the terminal","title":"Runs from the terminal","text":"julia --sysimage ABCreditjl.so main_st_in_out.jl par1 par2 ... par33","category":"page"},{"location":"api.html","page":"Code reference","title":"Code reference","text":"CurrentModule = ABCredit ","category":"page"},{"location":"api.html","page":"Code reference","title":"Code reference","text":"Pages = [\"api.md\"]","category":"page"},{"location":"api.html#Code-reference","page":"Code reference","title":"Code reference","text":"","category":"section"},{"location":"api.html","page":"Code reference","title":"Code reference","text":"In this page we document the functions which constitute the bulk of ABCredit.jl functionality.","category":"page"},{"location":"api.html#Agent-types","page":"Code reference","title":"Agent types","text":"","category":"section"},{"location":"api.html","page":"Code reference","title":"Code reference","text":"Modules = [ABCredit]\nOrder   = [:type, :function]\nPages   = [\"agents.jl\"]","category":"page"},{"location":"api.html#ABCredit.Aggregates","page":"Code reference","title":"ABCredit.Aggregates","text":"mutable struct Aggregates\n\nA mutable struct representing the aggregates in the model.\n\nFields:\n\nconsumption::Float64: consumption in nominal price\ncon::Float64: consumption in quantity\ninit_price::Float64: initial price\nprice::Float64: price\ninit_price_k::Float64: initial price of capital goods\nprice_k::Float64: average price of capital goods\nUn::Float64: unemployment\ndividends::Float64: dividends\ncredit_mismatch::Float64: credit mismatch\nbarK::Float64: barK\ndefaults::Float64: defaults\ndefaults_k::Float64: defaults of capital\ninflationRate::Float64: inflation rate\nY_nominal_tot::Float64: total nominal output\nY_real::Float64: total real output\ngdp_deflator::Float64: GDP deflator\nbankruptcy_rate::Float64: bankruptcy rate\ntotK::Float64: total capital\ntimestep::Int64: time step\nwb::Float64: wage bill\n\n\n\n\n\n","category":"type"},{"location":"api.html#ABCredit.Bank","page":"Code reference","title":"ABCredit.Bank","text":"mutable struct Bank <: AbstractBank\n\nA mutable struct representing a bank.\n\nFields:\n\nE::Float64: equity\nE_threshold::Float64: equity threshold\nloans::Float64: loans\nprofitsB::Float64: profits\ndividendsB::Float64: dividends\nreserves::Float64: reserves\ndeposits::Float64: deposits\n\n\n\n\n\n","category":"type"},{"location":"api.html#ABCredit.FirmCapital","page":"Code reference","title":"ABCredit.FirmCapital","text":"mutable struct FirmCapital <: AbstractCapitalFirm\n\nA mutable struct representing a firm's capital.\n\nFields:\n\nfirm_id::Int64: firm id, needed for the job market\nLeff_k::Float64: current employees\nY_k::Float64: production\nY_prev_k::Float64: past production\nY_kd::Float64: target quantity demanded\nP_k::Float64: prices\nA_k::Float64: firm equity\nliquidity_k::Float64: firm liquid resources\nDe_k::Float64: expected demand\ndeb_k::Float64: firm debts\nQ_k::Float64: actual sales\nFtot_k::Float64: total borrowings\ninterest_r_k::Float64: interest rate on loans\ninterests_k::Float64: interests paid\nLd_k::Int64: demanded labour\nB_k::Float64: financial gap\nlev_k::Float64: leverage\nvacancies_k::Int64: number of vacancies\ninventory_k::Float64: stock of goods\nwages_k::Float64: wages paid\nstock_k::Float64: stock of goods\nincome::Float64: the income provided to the owner of the firm\nPA::Float64: the PA of the owner of the firm\ncons_budget::Float64: consumption budget of the owner of the firm\npermanent_income::Float64: time-averaged income\n\n\n\n\n\n","category":"type"},{"location":"api.html#ABCredit.FirmProduction","page":"Code reference","title":"ABCredit.FirmProduction","text":"mutable struct FirmProduction <: AbstractConsumptionFirm\n\nA FirmProduction type.\n\nFields\n\nfirm_id::Int64: firm id, needed for the job market\nvalue_investments::Float64: investments in the firm\ninvestment::Float64: physical capital acquired in the period\nK::Float64: physical capital\nA::Float64: firm equity\nliquidity::Float64: firm liquid resources\ncapital_value::Float64: capital value\nP::Float64: prices\nY_prev::Float64: past production\nYd::Float64: target quantity demanded\nQ::Float64: actual sales\nLeff::Float64: current employees\nDe::Float64: expected demand\ndeb::Float64: firm debts\nbarK::Float64: \nbarYK::Float64: \nx::Float64: \ninterest_r::Float64: interest rate on loans\ninterests::Float64: interests paid\nFtot::Float64: total borrowings\nK_dem::Float64: demanded capital\nK_des::Float64: desired capital\nLd::Int64: demanded labour\nB::Float64: financial gap\nlev::Float64: leverage\nvacancies::Int64: number of vacancies\nY::Float64: production\nwages::Float64: wages paid\nstock::Float64: stock of goods\nincome::Float64: the income provided to the owner of the firm\nPA::Float64: the PA of the owner of the firm\ncons_budget::Float64: consumption budget of the owner of the firm\npermanent_income::Float64: time-averaged income\n\n\n\n\n\n","category":"type"},{"location":"api.html#ABCredit.Government","page":"Code reference","title":"ABCredit.Government","text":"mutable struct Government <: AbstractGovernment\n\nThe Government struct represents a government entity in the model.\n\nFields:\n\nG::Float64: government spending in subsidies\nTA::Float64: total taxes\nGB::Float64: government balance\nEXP::Float64: expenditure towards firms\nbonds::Float64: bonds\nbond_interest_rate::Float64: bond interest rate\nstock_bonds::Float64: stock of bonds\ndeficitGDP::Float64: deficit\nsubsidy::Float64: subsidy\n\n\n\n\n\n","category":"type"},{"location":"api.html#ABCredit.Model","page":"Code reference","title":"ABCredit.Model","text":"struct Model <: AbstractModel\n\nThe Model struct represents the entire model.\n\nFields:\n\nparams::Dict{Symbol, Any}: A dictionary that stores various parameters used in the model.\nworkers::Vector{Worker}: A vector of Worker objects representing the workers in the model.\nconsumption_firms::Vector{FirmProduction}: A vector of FirmProduction objects representing the consumption firms in the model.\ncapital_firms::Vector{FirmCapital}: A vector of FirmCapital objects representing the capital firms in the model.\nbank::Bank: An object representing the bank in the model.\ngov::Government: An object representing the government in the model.\nagg::Aggregates: An object representing the aggregate variables in the model.\n\n\n\n\n\n","category":"type"},{"location":"api.html#ABCredit.Worker","page":"Code reference","title":"ABCredit.Worker","text":"mutable struct Worker <: AbstractWorker\n\nA Worker type. \n\nFields\n\nw::Float64: earned wages\nPA::Float64: household personal assets (saving stock)\nOc::Int64: employment status: Oc(i)=j â€“> worker j employed by firm i; if i=0, j is unemployed\nincome::Float64: generic income, it can be wages or subsidy\ncons_budget::Float64: consumption budget\npermanent_income::Float64: time-averaged income\n\n\n\n\n\n","category":"type"},{"location":"api.html#Initialisation-function","page":"Code reference","title":"Initialisation function","text":"","category":"section"},{"location":"api.html","page":"Code reference","title":"Code reference","text":"Modules = [ABCredit]\nOrder   = [:type, :function]\nPages   = [\"init.jl\"]","category":"page"},{"location":"api.html#ABCredit.initialise_model-Tuple{Any, Any, Any}","page":"Code reference","title":"ABCredit.initialise_model","text":"initialise_model(W, F, N; params = ABCredit.PARAMS_ORIGINAL)\n\nInitializes the model with the given parameters.\n\nArguments\n\nW: Number of agents in the W dimension.\nF: Number of agents in the F dimension.\nN: Number of agents in the N dimension.\nparams: (optional) Dictionary of parameters for the model. Default is ABCredit.PARAMS_ORIGINAL.\n\nReturns\n\nmodel: The initialized model.\n\n\n\n\n\n","category":"method"},{"location":"api.html#Functions-to-run-an-entire-simulation","page":"Code reference","title":"Functions to run an entire simulation","text":"","category":"section"},{"location":"api.html","page":"Code reference","title":"Code reference","text":"Modules = [ABCredit]\nOrder   = [:type, :function]\nPages   = [\"one_simulation.jl\"]","category":"page"},{"location":"api.html#ABCredit.run_n_sims-Tuple{Any, Any, Any}","page":"Code reference","title":"ABCredit.run_n_sims","text":"run_n_sims(model, T, n_sims)\n\nRun multiple independent simulations of a given model in parallel.\n\nArguments\n\nmodel: The model to be simulated.\nT: The duration of each simulation.\nn_sims: The number of simulations to run.\n\nReturns\n\nAn array of ABCreditData objects, each representing the data generated from a single simulation.\n\n\n\n\n\n","category":"method"},{"location":"api.html#ABCredit.run_one_sim!-Tuple{ABCredit.AbstractModel, Int64}","page":"Code reference","title":"ABCredit.run_one_sim!","text":"run_one_sim!(model::AbstractModel, T::Int64; seed = nothing)\n\nSimulates the model for a given number of time steps. In essence it performs a for loop over the complete step function     for T times and saves results into an object called 'd'.\n\nArguments\n\nmodel::AbstractModel: The model to be simulated.\nT::Int64: The number of time steps to simulate.\nseed = nothing: Optional seed for the random number generator.\nburn_in = 0: Number of time steps to run before starting to collect data.\n\nReturns\n\nd::ABCreditData: The data collector object containing the simulation results.\n\n\n\n\n\n","category":"method"},{"location":"api.html","page":"Code reference","title":"Code reference","text":"Modules = [ABCredit]\nOrder   = [:type, :function]\nPages   = [\"one_step.jl\"]","category":"page"},{"location":"api.html#ABCredit.one_model_step!-Tuple{ABCredit.AbstractModel}","page":"Code reference","title":"ABCredit.one_model_step!","text":"one_model_step!(model::AbstractModel)\n\nA complete step of the model simulation.\n\nArguments\n\nmodel::AbstractModel: The model object representing the simulation.\n\n\n\n\n\n","category":"method"},{"location":"api.html#Firms-actions","page":"Code reference","title":"Firms actions","text":"","category":"section"},{"location":"api.html","page":"Code reference","title":"Code reference","text":"Modules = [ABCredit]\nOrder   = [:type, :function]\nPages   = [\"firm_investment.jl\", \"firms_expected_demand.jl\", \"production.jl\"]","category":"page"},{"location":"api.html#ABCredit.firm_produces!-Tuple{ABCredit.AbstractCapitalFirm, ABCredit.AbstractModel}","page":"Code reference","title":"ABCredit.firm_produces!","text":"firm_produces!(firm::AbstractCapitalFirm, model::AbstractModel)\n\nThis function updates the production of a capital firm based on available resources and model parameters.\n\nArguments\n\nfirm::AbstractCapitalFirm: The consumption firm for which production is being updated.\nmodel::AbstractModel: The model containing the parameters and aggregate variables.\n\n\n\n\n\n","category":"method"},{"location":"api.html#ABCredit.firm_produces!-Tuple{ABCredit.AbstractConsumptionFirm, ABCredit.AbstractModel}","page":"Code reference","title":"ABCredit.firm_produces!","text":"firm_produces!(firm::AbstractConsumptionFirm, model::AbstractModel)\n\nThis function updates the production of a consumption firm based on available resources and model parameters.\n\nArguments\n\nfirm::AbstractConsumptionFirm: The consumption firm for which production is being updated.\nmodel::AbstractModel: The model containing the parameters and aggregate variables.\n\n\n\n\n\n","category":"method"},{"location":"api.html#ABCredit.firms_produce!-Tuple{Union{Vector{<:ABCredit.AbstractConsumptionFirm}, Vector{<:ABCredit.AbstractCapitalFirm}}, ABCredit.AbstractModel}","page":"Code reference","title":"ABCredit.firms_produce!","text":"firms_produce!(firms, model)\n\nIterates over a collection of firms and calls the firm_produces! function for each firm.\n\nArguments\n\nfirms: A vector of consumption or capital firms.\nmodel: An abstract model representing the economic environment.\n\n\n\n\n\n","category":"method"},{"location":"api.html","page":"Code reference","title":"Code reference","text":"ABCredit.firm_accounting!(firm::AbstractConsumptionFirm, model::AbstractModel)\nABCredit.firm_accounting!(firm::AbstractCapitalFirm, model::AbstractModel)","category":"page"},{"location":"api.html#ABCredit.firm_accounting!-Tuple{ABCredit.AbstractConsumptionFirm, ABCredit.AbstractModel}","page":"Code reference","title":"ABCredit.firm_accounting!","text":"firm_accounting!(firm::AbstractConsumptionFirm, model::AbstractModel)\n\nPerform accounting operations for a consumption firm in a given model.\n\nArguments\n\nfirm::AbstractConsumptionFirm: The firm for which accounting operations are performed.\nmodel::AbstractModel: The model in which the firm operates.\n\nDescription\n\nThis function updates the firm's liquidity, loans, profits, income, dividends, and assets based on the given model parameters.\n\n\n\n\n\n","category":"method"},{"location":"api.html#ABCredit.firm_accounting!-Tuple{ABCredit.AbstractCapitalFirm, ABCredit.AbstractModel}","page":"Code reference","title":"ABCredit.firm_accounting!","text":"firm_accounting!(firm::AbstractCapitalFirm, model::AbstractModel)\n\nPerform accounting operations for a capital firm in a given model.\n\nArguments\n\nfirm::AbstractCapitalFirm: The firm for which accounting operations are performed.\nmodel::AbstractModel: The model in which the firm operates.\n\nDescription\n\nThis function updates the firm's liquidity, loans, profits, income, dividends, and assets based on the given model parameters.\n\n\n\n\n\n","category":"method"},{"location":"api.html#Workers-actions","page":"Code reference","title":"Workers actions","text":"","category":"section"},{"location":"api.html","page":"Code reference","title":"Code reference","text":"Modules = [ABCredit]\nOrder   = [:type, :function]\nPages   = [\"worker_gets_paid.jl\"]","category":"page"},{"location":"api.html#ABCredit.worker_gets_paid!-Tuple{ABCredit.AbstractWorker, ABCredit.AbstractModel}","page":"Code reference","title":"ABCredit.worker_gets_paid!","text":"worker_gets_paid!(worker::AbstractWorker, model::AbstractModel)\n\nThis function calculates the income of a worker based on their employment status and the model parameters.      If the worker is employed, their income is determined by their wage after taxes.      If the worker is unemployed, they receive a subsidy. The function also updates the net worth of the worker.\n\nArguments\n\nworker::AbstractWorker: The worker for whom the income is being calculated.\nmodel::AbstractModel: The model containing the parameters and government data.\n\n\n\n\n\n","category":"method"},{"location":"api.html#ABCredit.workers_get_paid!-Tuple{Vector{<:ABCredit.AbstractWorker}, ABCredit.AbstractModel}","page":"Code reference","title":"ABCredit.workers_get_paid!","text":"workers_get_paid!(workers::Vector{<:AbstractWorker}, model::AbstractModel)\n\nPay the workers in the given vector by calling worker_gets_paid! for each worker.\n\nArguments\n\nworkers::Vector{<:AbstractWorker}: A vector of workers to be paid.\nmodel::AbstractModel: The model used to calculate the payment.\n\n\n\n\n\n","category":"method"},{"location":"api.html#Bank-actions","page":"Code reference","title":"Bank actions","text":"","category":"section"},{"location":"api.html","page":"Code reference","title":"Code reference","text":"ABCredit.bank_accounting!","category":"page"},{"location":"api.html#ABCredit.bank_accounting!","page":"Code reference","title":"ABCredit.bank_accounting!","text":"bank_accounting!(bank::AbstractBank, model::AbstractModel)\n\nUpdate the accounting records of a bank based on the current state of the economy.\n\nArguments\n\nbank::AbstractBank: The bank object whose accounting records need to be updated.\nmodel::AbstractModel: The model object representing the current state of the economy.\n\nDescription\n\nThis function updates the profits, dividends, and equity of a bank based on the current state of the economy.      It calculates the profits from government loans, pays dividends to shareholders, and distributes the dividends      to the income and assets of the firms owners.\n\n\n\n\n\n","category":"function"},{"location":"api.html#Government-actions","page":"Code reference","title":"Government actions","text":"","category":"section"},{"location":"api.html","page":"Code reference","title":"Code reference","text":"Modules = [ABCredit]\nOrder   = [:type, :function]\nPages   = [\"government.jl\"]","category":"page"},{"location":"api.html#ABCredit.gov_accounting!-Tuple{ABCredit.AbstractGovernment, ABCredit.AbstractModel}","page":"Code reference","title":"ABCredit.gov_accounting!","text":"gov_accounting!(gov::AbstractGovernment, model::AbstractModel)\n\nUpdate the government's accounting by adjusting the government balance, stock of bonds, and deficit to GDP ratio.\n\nArguments\n\ngov::AbstractGovernment: The government object.\nmodel::AbstractModel: The model object.\n\n\n\n\n\n","category":"method"},{"location":"api.html#ABCredit.gov_adjusts_subsidy!-Tuple{ABCredit.AbstractGovernment, ABCredit.AbstractModel}","page":"Code reference","title":"ABCredit.gov_adjusts_subsidy!","text":"gov_adjusts_subsidy!(gov::AbstractGovernment, model::AbstractModel)\n\nAdjusts the subsidy amount based on the predicted deficit and the target deficit.\n\nArguments\n\ngov::AbstractGovernment: The government object.\nmodel::AbstractModel: The model object.\n\n\n\n\n\n","category":"method"},{"location":"api.html#ABCredit.set_bond_interest_rate!-Tuple{ABCredit.AbstractGovernment, ABCredit.AbstractModel}","page":"Code reference","title":"ABCredit.set_bond_interest_rate!","text":"The interest rate on government bonds is set\n\n\n\n\n\n","category":"method"},{"location":"examples/basic_example.html","page":"Essentials","title":"Essentials","text":"EditURL = \"../../../examples/basic_example.jl\"","category":"page"},{"location":"examples/basic_example.html#Essential-use-of-ABCredit","page":"Essentials","title":"Essential use of ABCredit","text":"","category":"section"},{"location":"examples/basic_example.html","page":"Essentials","title":"Essentials","text":"We start by importing the ABCredit library and other useful libraries.","category":"page"},{"location":"examples/basic_example.html","page":"Essentials","title":"Essentials","text":"using ABCredit\nusing Statistics, Plots","category":"page"},{"location":"examples/basic_example.html","page":"Essentials","title":"Essentials","text":"We then select the number of workers (W), the number of firms that produce consumption goods (F), and the number of firms that produe capital goods (N).","category":"page"},{"location":"examples/basic_example.html","page":"Essentials","title":"Essentials","text":"W = 1000\nF = 100\nN = 20","category":"page"},{"location":"examples/basic_example.html","page":"Essentials","title":"Essentials","text":"The other parameters of the model are stored in a dictionary. Some standard parametrisations like the original one are readily available from the library.","category":"page"},{"location":"examples/basic_example.html","page":"Essentials","title":"Essentials","text":"params = ABCredit.PARAMS_ORIGINAL","category":"page"},{"location":"examples/basic_example.html","page":"Essentials","title":"Essentials","text":"We can not initialise our model","category":"page"},{"location":"examples/basic_example.html","page":"Essentials","title":"Essentials","text":"model = ABCredit.initialise_model(W, F, N; params);\nnothing #hide","category":"page"},{"location":"examples/basic_example.html","page":"Essentials","title":"Essentials","text":"Note that, after initialisation, the parameters of the model are accessible and modifiable as attributes of the model object. Here, for instance, we set the tax rate to 0.1","category":"page"},{"location":"examples/basic_example.html","page":"Essentials","title":"Essentials","text":"model.params[:tax_rate] = 0.0\nmodel.params[:subsidy] = 0.0","category":"page"},{"location":"examples/basic_example.html","page":"Essentials","title":"Essentials","text":"We run the mdel for an initial numbef of \"burn-in\" epochs for equilibration, the simulation will output a data collector \"d\" with several time series.","category":"page"},{"location":"examples/basic_example.html","page":"Essentials","title":"Essentials","text":"Tburnin = 300 d = ABCredit.runonesim!(model, Tburnin; seed = 1) model.agg.timestep = 1","category":"page"},{"location":"examples/basic_example.html","page":"Essentials","title":"Essentials","text":"Now we run the mdel for T epochs, the results simulation will output a data collector \"d\" with several time series.","category":"page"},{"location":"examples/basic_example.html","page":"Essentials","title":"Essentials","text":"T = 1000\nd = ABCredit.run_one_sim!(model, T; seed = 100, burn_in = 100)","category":"page"},{"location":"examples/basic_example.html","page":"Essentials","title":"Essentials","text":"If needed, we can save the simulation data to a CSV file as","category":"page"},{"location":"examples/basic_example.html","page":"Essentials","title":"Essentials","text":"ABCredit.save_csv(d, \"data.csv\")","category":"page"},{"location":"examples/basic_example.html","page":"Essentials","title":"Essentials","text":"Now we can plot some of the store time series","category":"page"},{"location":"examples/basic_example.html","page":"Essentials","title":"Essentials","text":"p1 = plot(d.Y_real, title = \"gdp\", titlefont = 10)\np2 = plot(d.inflationRate, title = \"inflation\", titlefont = 10)\np3 = plot(d.Un, title = \"unemployment\", titlefont = 10)\np4 = plot(d.consumption, title = \"consumption\", titlefont = 10)\np5 = plot(d.totalDeb, title = \"gross debt\", titlefont = 10)\np6 = plot(d.Investment, title = \"gross investment\", titlefont = 10)\np7 = plot(d.totK, title = \"capital stock\", titlefont = 10)\np8 = plot(d.profitsB, title = \"bank profits\", titlefont = 10)\np9 = plot(d.E, title = \"bank equity\", titlefont = 10)\n\nplot(p1, p2, p3, p4, p5, p6, p7, p8, p9, layout = (3, 3), legend = false)","category":"page"},{"location":"examples/parallel_evaluations.html","page":"Parallel evaluations","title":"Parallel evaluations","text":"EditURL = \"../../../examples/parallel_evaluations.jl\"","category":"page"},{"location":"examples/parallel_evaluations.html#Using-multithreading-for-parallel-model-evaluations","page":"Parallel evaluations","title":"Using multithreading for parallel model evaluations","text":"","category":"section"},{"location":"examples/parallel_evaluations.html","page":"Parallel evaluations","title":"Parallel evaluations","text":"import ABCredit.jl and other useful libraries","category":"page"},{"location":"examples/parallel_evaluations.html","page":"Parallel evaluations","title":"Parallel evaluations","text":"using ABCredit, StatsPlots\n\nparams = ABCredit.PARAMS_ORIGINAL","category":"page"},{"location":"examples/parallel_evaluations.html","page":"Parallel evaluations","title":"Parallel evaluations","text":"run 8 simulations in parallel and save the results in different CSV files","category":"page"},{"location":"examples/parallel_evaluations.html","page":"Parallel evaluations","title":"Parallel evaluations","text":"W = 1000\nF = 100\nN = 20\n\nnsims = 8\n\nT = 700","category":"page"},{"location":"examples/parallel_evaluations.html","page":"Parallel evaluations","title":"Parallel evaluations","text":"remove the Government","category":"page"},{"location":"examples/parallel_evaluations.html","page":"Parallel evaluations","title":"Parallel evaluations","text":"params[:tax_rate] = 0.0\nparams[:subsidy] = 0.0\n\nmodel = ABCredit.initialise_model(W, F, N; params);\n\nd = ABCredit.run_n_sims(model, T, nsims; burn_in = 100)","category":"page"},{"location":"examples/parallel_evaluations.html","page":"Parallel evaluations","title":"Parallel evaluations","text":"errorline the mean and the standard deviation of the collected series","category":"page"},{"location":"examples/parallel_evaluations.html","page":"Parallel evaluations","title":"Parallel evaluations","text":"p1 = errorline(d.Y_real, title = \"OUTPUT\", titlefont = 10)\np2 = errorline(d.Y_nominal_tot, title = \"OUTPUT (NOMINAL)\", titlefont = 10)\np3 = errorline(d.gdp_deflator, title = \"PRICE IND\", titlefont = 10)\np4 = errorline(d.inflationRate, title = \"INFLAITON\", titlefont = 10)\np5 = errorline(d.consumption, title = \"CONSUMPTION\", titlefont = 10)\np6 = errorline(d.wb, title = \"WAGE\", titlefont = 10)\np7 = errorline(d.Un, title = \"UNEMPLOYMENT\", titlefont = 10)\np8 = errorline(d.bankruptcy_rate, title = \"BANKRUPTCY RATE\", titlefont = 10)\np9 = errorline(d.totalDeb, title = \"DEBT P-FIRM\", titlefont = 10)\np10 = errorline(d.totalDeb_k, title = \"DEBT C-FIRM\", titlefont = 10)\np11 = errorline(d.Investment, title = \"INVESTMENT\", titlefont = 10)\np12 = errorline(d.totK, title = \"TOTAL CAPITAL\", titlefont = 10)\np13 = errorline(d.inventories, title = \"INVENTORIES\", titlefont = 10)\np14 = errorline(d.inventories_k, title = \"INVENTORIES CAP\", titlefont = 10)\np15 = errorline(d.E, title = \"BANK EQUITY\", titlefont = 10)\np16 = errorline(d.dividendsB, title = \"DIVIDEND\", titlefont = 10)\np17 = errorline(d.profitsB, title = \"PROFIT\", titlefont = 10)\np18 = errorline(d.deposits, title = \"DEPOSITS\", titlefont = 10)","category":"page"},{"location":"examples/parallel_evaluations.html","page":"Parallel evaluations","title":"Parallel evaluations","text":"plotting a fist set of variables","category":"page"},{"location":"examples/parallel_evaluations.html","page":"Parallel evaluations","title":"Parallel evaluations","text":"plot(p1, p2, p3, p4, p5, p6, p7, p8, p9, layout = (3, 3), legend = false)","category":"page"},{"location":"examples/parallel_evaluations.html","page":"Parallel evaluations","title":"Parallel evaluations","text":"plotting a second set of variables","category":"page"},{"location":"examples/parallel_evaluations.html","page":"Parallel evaluations","title":"Parallel evaluations","text":"plot(p10, p11, p12, p13, p14, p15, p16, p17, p18, layout = (3, 3), legend = false)","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"CurrentModule = ABCredit ","category":"page"},{"location":"index.html#ABCredit.jl","page":"Home","title":"ABCredit.jl","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"A fast, and simple to use, Julia implementation of the model in Emergent dynamics of a macroeconomic agent based model with capital and credit, Assenza et al. (2017).","category":"page"},{"location":"index.html#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"using Pkg\nPkg.add(\"ABCredit\")","category":"page"},{"location":"index.html#Quick-example","page":"Home","title":"Quick example","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"using ABCredit\n\nW = 1000 # number of workers\nF = 100  # number of consumption firms\nN = 20   # number of capital firms\n\nmodel = ABCredit.initialise_model(W, F, N)\n\nT = 1000 # number of epochs\n\nd = ABCredit.run_one_sim!(model, T)","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"To plot the time series within the d object, make sure you install Plots.jl in the same environment using","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"Pkg.add(\"Plots\")","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"and then try running","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"using Plots\n\nplot(data.Y_real)","category":"page"},{"location":"index.html#Original-author","page":"Home","title":"Original author","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"Aldo Glielmo <aldo.glielmo@bancaditalia.it>","category":"page"},{"location":"index.html#Other-collaborators-for-the-project","page":"Home","title":"Other collaborators for the project","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"Simone Brusatin\nDebmallya Chanda\nMarco Favorito\nDomenico Delli Gatti\nMarco Benedetti","category":"page"},{"location":"index.html#Citing-*ABCredit*","page":"Home","title":"Citing ABCredit","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"If you found this package useful for your research, please cite the following publication","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"@inproceedings{glielmo2023reinforcement,\n  title={Reinforcement Learning for Combining Search Methods in the Calibration of Economic ABMs},\n  author={Aldo Glielmo and Marco Favorito and Debmallya Chanda and Domenico Delli Gatti},\n  booktitle={Proceedings of the Fourth ACM International Conference on AI in Finance},\n  pages={305--313},\n  year={2023}\n}","category":"page"},{"location":"index.html#Disclaimer","page":"Home","title":"Disclaimer","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"This package is an outcome of a research project. All errors are those of the authors. All views expressed are personal views, not those of Bank of Italy.","category":"page"}]
}
